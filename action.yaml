name: Semver
description: Generate semver
inputs:
  input:
    description: Input to match the pattern on
    required: true
    default: ${{ github.ref_name }}
  pattern:
    description: Semver pattern string
    required: true
    default: ^v?(?P<major>[0-9]+)(?:\.(?P<minor>[0-9]+))?(?:\.(?P<patch>[0-9]+))?(?:\-(?P<prerelease>[\w-]+))?(?:\+(?P<build>[\w-]+))?$
outputs:
  version:
    description: The full matched version string
    value: ${{ steps.semver.outputs.version }}
  major:
    description: Semver major version
    value: ${{ steps.semver.outputs.major }}
  minor:
    description: Semver minor version
    value: ${{ steps.semver.outputs.minor }}
  patch:
    description: Semver patch version
    value: ${{ steps.semver.outputs.patch }}
  prerelease:
    description: Semver prerelease version
    value: ${{ steps.semver.outputs.prerelease }}
  build:
    description: Semver build version
    value: ${{ steps.semver.outputs.build }}
  json:
    description: Semver build version
    value: ${{ steps.semver.outputs.json }}
runs:
  using: composite
  steps:
  - shell: python
    id: semver
    run: |
      import re
      import json

      input = '${{ inputs.input }}'
      pattern = re.compile('${{ inputs.pattern }}')
      matched = pattern.match(input)

      if matched:
          groupdict = matched.groupdict()
          print('::set-output name=json::{}'.format(json.dumps(groupdict)))
          print('::set-output name=version::{}'.format(matched.string))

          for key, value in groupdict.items():
            if not value:
              continue

            print('::set-output name={key}::{value}'.format(key=key, value=value))
  - shell: bash
    run: |
      echo "::group::Output"
      yq e -P <<< '${{ steps.semver.outputs.json }}'
      echo "::endgroup::"
